# Created 2025-06-20 Fri 12:41
#+title: Numerical Analysis
#+author: Jesse Oldroyd
* <2025-06-19 Thu>
Many mathematical models are written in terms of *differential equations*.
These are equations that describe how some quantity $y$ changes over time (or
position, or...).  A simple example of such an equation is $y' = y$ where
$y(x)$ is some (for now) unknown function.

Many differential equations are difficult if not impossible to solve exactly,
and so numerical approaches have been developed for estimating solutions to
these equations.  In these notes we're going to look at how we can implement
some of these approaches here.

*Euler's Method* is probably the simplest method to approximate the solution
 of a differential equation.  For this method, we usually have some initial
 data (represented as a point $(x_0, y_0)$) and we want to figure out $y(x)$
 for some other value of $x$.  We can try to estimate $y(x)$ by using
 information about how $y$ changes (it's differential equation!) and by
 choosing a step-size $h$.  Euler's Method can be effective on equations of
 the form $y' = f(t, y), y(t_0) = y_0$.
* <2025-06-20 Fri>
*Example*: A car leaves Buckhannon at 12 p.m.  You happen to know how fast the
car is traveling at 1 p.m., 2 p.m., 3 p.m. and 4 p.m.:
| time        | 12 |  1 |  2 |  3 |  4 |
| speed (mph) | 60 | 45 | 55 | 50 | 60 |
How far away is the car from Buckhannon at 5 p.m., assuming that the car is
always moving in the same direction?
#+begin_src python
  # NumPy helps us out with doing the actual calculations
  import numpy as np

  # We need to set up some data for NumPy to use.
  velocities = np.array([60, 45, 55, 50, 60])
  times = np.linspace(0, 4, num=5)
#+end_src

*Example*: Write a function in Python ~euler_m~ that implements Euler's
Method.
#+begin_src python :results output
  import numpy as np

  def euler_m(f, t0, y0, h, n):
      tn, yn = t0, y0

      for i in range(n):
          yn = yn + h*f(tn, yn)
          tn = tn + h

      return np.array([tn, yn])

  def f(t, y):
      return y
#+end_src

Numerical analysis is generally concerned with how to efficiently solve or
approximate solutions of mathematical problems.  Efficiency does not just mean
accuracy!  We are also concerned with computational costs and ease of
implementation.

A common use of numerical analysis is in solving algebraic equations that are
difficult if not impossible to solve exactly.

*Example*: Solve $x^3 - 3x + 1= 0$.
#+begin_src python :results output :exports both
  import matplotlib.pyplot as plt
  import numpy as np

  x = np.linspace(-2, 2)
  y = x**3 - 3*x + 1

  plt.axhline(0, color="k")
  plt.axvline(0, color="k")
  plt.grid()
  plt.plot(x, y, "b")
  plt.show()
#+end_src

#+results: 
