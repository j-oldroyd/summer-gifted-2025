#+TITLE: Summer Gifted Notes 2025
#+AUTHOR: Jesse Oldroyd

* Chaos Game
  :PROPERTIES:
  :EXPORT_FILE_NAME: chaos-game
  :END:
** <2025-06-23 Mon>
  These activities make use of the ~chaos-animate.py~ code on GitHub.

  *Activity 1*: If you set ~n~ equal to $3$ and ~r~ equal to $0.5$ in
                ~chaos-animate.py~, you get the fractal known as the Sierpinski
                triangle.  The dimension of this fractal is the number that
                solves the equation $2^d = 3$.  Try using Python to find this
                number by checking different values of $d$.

                | $d$ | $N = 2^d$ |
                |   |           |
                |   |           |
                |   |           |
                |   |           |
                |   |           |
                |   |           |
                |   |           |
                |   |           |
                |   |           |
                |   |           |
  *Activity 2*: You can set values for ~n~ (the number of sides of your shape)
                and ~r~ (how much you travel during each step).  For each value
                of ~n~ there is a value of ~r~ that is special because the
                fractals that result don't overlap.  If ~n~ is $3$ then the
                corresponding ~r~ is $0.5$.  What do you think the corresponding
                values of ~r~ should be for ~n~ equal to $4$ and $5$?  What do
                you think will happen to this value of ~r~ as ~n~ gets larger?

                | ~n~ | best ~r~ |
                |   3 | $0.5$    |
                |   5 |          |
                |   6 |          |
                |   7 |          |
                |   8 |          |
                |   9 |          |
                |  10 |          |
  *Activity 3*: We can modify the Chaos Game as well by selecting different
                points to jump towards.  Try adding a point at the exact center
                using ~pts.append([0, 0])~ and then set ~n~ to $4$ and ~r~ to
                $\frac{2}{3}$.  If you triple the side of this fractal, how many
                copies of the original do you wind up with?  What equation does
                the dimension of this fractal solve, and what is your best
                estimate of the dimension?

*** Other fractals
    Some other important examples of fractal shapes/regions include the /Cantor
    set/ and the /Koch snowflake/.
* Combinatorics
  :PROPERTIES:
  :EXPORT_FILE_NAME: combinatorics
  :END:
** <2025-06-19 Thu>
  *Combinatorics* is the mathematics of counting objects.  It's generally a lot
   harder than it sounds!

   *Example*: Try answering the following questions:
   1. How many batting lineups are possible from a nine-player roster in
      baseball?
   2. How many three letter "words" can be formed from the letters $A, B, C$?
   3. If two nickels, three dimes and seven pennies, in how many ways can you
      make 22 cents?
   4. In how many ways can you use nickels, dimes and pennies to make 22 cents
      in change?

   Counting problems can have different features that affect the count, such as
   whether or not order matters, or whether or not we "draw without
   replacement."

   A *set* is a collection of elements, often denoted using curly braces: $\{1,
   2, 3\}$ is one example of a set, as is $\mathbb{Z}_7 = \{0, 1, 2, 3, 4, 5,
   6\}$.  The *empty set* is the unique set which contains no elements:
   $\emptyset = \{ \}$.  A *subset* of another set is just a set that contains
   none, some or all elements from that set: $\{0, 1\}$ is a subset of
   $\mathbb{Z}_7$ but not of $\{1, 2, 3\}$.

   *Example*: How many subsets can you find for $\{1, 2\}$?  What about $\{1, 2,
    3, 4\}$?  Can you find a general formula?

    /Answer/: A set with $n$ elements has $2^n$ subsets.
** <2025-06-20 Fri>
    The batting order example and the subset example here are respectively
    examples of *permutations* and *combinations*.  Both are examples of counts
    /without/ replacement, but order matters for permutations whereas order
    doesn't matter for combinations.

    *Example*: Given $3$ distinct objects, in how many ways can they be
     arranged?  What if you had $10$ distinct objects?  What if you had $n$?

    The number of permutations of $n$ distinct objects is denoted by $_nP_n$.
    In the last example, you found $_3P_3, _{10}P_{10}$ and $_nP_n$.

    *Example*: How many four digit numbers are there that use the digits $1$
     through $9$, but no digit shows up more than once?

    The number of combinations of $k$ objects from $n$ total distinct objects is
    denoted by $_nC_k$ or $\binom{n}{k}$ (read as "$n$ choose $k$").  These
    numbers are also sometimes called binomial coefficients.

    *Example*: Find the number of subsets of $\{1, 2, 3\}$ of size $2$ and
     write this as an appropriate binomial coefficient.

    *Example*: Find a formula for $\binom{n}{k}$.
** <2025-06-23 Mon>
   Counting hands in poker is a good test and application of counting with
   combinations.
* Cryptography
  :PROPERTIES:
  :EXPORT_FILE_NAME: cryptography
  :END:
  Lectures for mathematics summer gifted program.
** <2025-06-16 Mon>
   - Python code for substitution cipher:
   #+begin_src python :results output :session yes :exports both
     import random

     letters = list('abcdefghijklmnopqrstuvwxyz')
     letters_cipher = letters.copy()
     random.shuffle(letters_cipher)

     encryption_key = {}
     decryption_key = {}
     for l1, l2 in zip(letters, letters_cipher):
         encryption_key[l1] = l2
         decryption_key[l2] = l1

     def substitution_encrypt(plaintext, encryption_key):
         plaintext = plaintext.lower()
         ciphertext = ""

         for letter in plaintext:
             if letter in encryption_key.keys():
                 ciphertext += encryption_key[letter]
             else:
                 ciphertext += letter

         return ciphertext

     def substitution_decrypt(ciphertext, decryption_key):
         ciphertext = ciphertext.lower()
         plaintext = ""

         for letter in ciphertext:
             if letter in decryption_key.keys():
                 plaintext += decryption_key[letter]
             else:
                 plaintext += letter

         return plaintext

     message = "This is my message."
     encrypted_message = substitution_encrypt(message, encryption_key)
     decrypted_message = substitution_decrypt(encrypted_message, decryption_key)

     print(f"Message: {message}")
     print(f"Ciphertext: {encrypted_message}")
     print(f"Plaintext: {decrypted_message}")
   #+end_src

   #+RESULTS:
   : Message: This is my message.
   : Ciphertext: fzty ty ce cxyypbx.
   : Plaintext: this is my message.

   - [[https://pi.math.cornell.edu/~mec/2003-2004/cryptography/subs/frequencies.html][Frequency diagram]] for letters of the English language.

   - *Example*: The following message has been encrypted using a substitution
     cipher: 'ykbk nk vbk, og pijlyvggcg, nktz qobaogov.'
     Decrypt this message.

     /Answer/: The frequency diagram above gives us some clues as to what each
     letter could represent.  In particular, since ~e~ is the most common letter
     of the English alphabet and ~g~ and ~k~ are frequent letters in the above
     message, we can try to replace either of these letters (but not both!) with
     ~e~:
     #+begin_src python :session yes :exports both
       ciphertext = 'ykbk nk vbk, og pijlyvggcg, nktz qobaogov'
       decrypt2 = {'k':'e'} # Try replacing k with e
       substitution_decrypt(ciphertext, decrypt2)
     #+end_src

     #+RESULTS:
     : yebe ne vbe, og pijlyvggcg, netz qobaogov

     Since the first word becomes ~yebe~, we now look for a four-letter word in
     English that has an ~e~ in the second and last entries.  One example, after
     some trial and error, is ~here~.  So now we try replacing ~y~ with ~h~ and
     ~b~ with ~r~:
     #+begin_src python :session yes :exports both
       decrypt2['y'] = 'h'
       decrypt2['b'] = 'r'
       substitution_decrypt(ciphertext, decrypt2)
     #+end_src

     #+RESULTS:
     : here ne vre, og pijlhvggcg, netz qoraogov

     Now the first phrase in this message looks like it could be "here we are",
     and so we continue with these substitutions:
     #+begin_src python :session yes :exports both
       decrypt2['n'] = 'w'
       decrypt2['v'] = 'a'
       substitution_decrypt(ciphertext, decrypt2)
     #+end_src

     #+RESULTS:
     : here we are, og pijlhaggcg, wetz qoraogoa

     A natural word that follows the phrase "here we are" is "in", so once again
     we add those letters to our key:
     #+begin_src python :session yes :exports both
       decrypt2['o'] = 'i'
       decrypt2['g'] = 'n'
       substitution_decrypt(ciphertext, decrypt2)
     #+end_src

     #+RESULTS:
     : here we are, in pijlhanncn, wetz qirainia

     A little bit more trial and error gives the (likely) decrypted message:
     "here we are, in Buckhannon, West Virginia".
** <2025-06-17 Tue>
   A *Caesar cipher* is an ancient cryptographic technique that represents a
   special case of the substitution cipher mentioned above.  Also called a
   /shift cipher/, this cipher simply shifts each letter of the alphabet down by
   a certain amount:
   | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z |
   | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | a | b | c |

   The above table is an example of a ~ROT3~ Caesar cipher since each letter was
   shifted three letters along the alphabet.

   *Example*: Use the ~ROT3~ cipher above to encrypt the message ~Picard is
    better than Kirk.~  What Caesar cipher is the decryption key for the ~ROT3~
    cipher?  You can use the application [[https://caesar-cipher.com/caesar-cipher-wheel][here]] to help you visualize the cipher.

   *Example*: The Caesar cipher is also vulnerable to frequency analysis just
    like the substitution cipher is.  Using this, try to decrypt the following
    message encrypted using the Caesar cipher:
    #+begin_src python :results output :exports results
      letters = list('abcdefghijklmnopqrstuvwxyz')
      letters_rotated = []
      for j in range(26):
          new_letter_pos = (j+15)%26
          letters_rotated.append(letters[new_letter_pos])

      message = "Is anyone even able to figure out this message?  I'm not sure."

      encryption_key = {}
      decryption_key = {}
      for l1, l2 in zip(letters, letters_rotated):
          encryption_key[l1] = l2
          decryption_key[l2] = l1

      def substitution_encrypt(plaintext, encryption_key):
          plaintext = plaintext.lower()
          ciphertext = ""

          for letter in plaintext:
              if letter in encryption_key.keys():
                  ciphertext += encryption_key[letter]
              else:
                  ciphertext += letter

          return ciphertext

      def substitution_decrypt(ciphertext, decryption_key):
          ciphertext = ciphertext.lower()
          plaintext = ""

          for letter in ciphertext:
              if letter in decryption_key.keys():
                  plaintext += decryption_key[letter]
              else:
                  plaintext += letter

          return plaintext

      print(substitution_encrypt(message, encryption_key))
    #+end_src

    #+RESULTS:
    : xh pcndct tktc pqat id uxvjgt dji iwxh bthhpvt?  x'b cdi hjgt.

    Part of the reason the Caesar cipher is so easy to crack, like any other
    substitution cipher, is because there is a one-to-one correspondence between
    letters before and after encryption.  One way to address this is to use a
    combination of Caesar ciphers as in the Vigenere cipher.  Such a cipher
    makes use of a table like the following to encrypt a message: [[https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher#/media/File:Vigen%C3%A8re_square_shading.svg][Vigenere
    cipher]].

    This encryption scheme involves first choosing a /keyword/ and then using
    the keyword to determine the corresponding encryption.  For example, the
    message ~I'M THE BEST AT USING MAKING SECRETS~ with the keyword ~CATS~ would
    encrypt to ~KMMZGBXKCAMECKBFISYUTEMK~.  The encryption process works by
    selecting a row of the above Vigenere table using an appropriate letter from
    the keyword and a column using the corresponding letter of the plaintext to
    produce the encrypted letter.  The decryption process works by choosing a
    row of the table by using the keyword, following along the row until you hit
    the ciphertext letter, and then using the column to determine the plaintext
    letter.

    *Example*: using the Vigenere cipher with the keyword ~BAD~, /encrypt/ the
     plaintext ~WHOYOUGONNACALL~ and /decrypt/ the ciphertext ~HOVFAKBWNT~.

    The Vigenere cipher long had a reputation for being unbreakable without
    knowing the keyword, but in the 19th century mathematicians developed
    methods for analyzing this cipher using frequency analysis.  To get an idea
    of how this analysis works, suppose that some message is encrypted with an
    unknown keyword to get ~URCAFYBBIKVLURCAFYBBI~.  A segment of this coded
    message is repeated, which suggests that this segment corresponds to the
    same word or phrase in the original message.  The second segment starts $12$
    positions after the first, and so the keyword or phrase must be either $1$,
    $2$, $3$, $4$, $6$, or $12$ letters long.  Since $1$, $2$, and $3$ would be
    very short (and therefore weak) keywords, one can assume that the keyword is
    $4$ letters long.

    Now suppose we also happen to learn that the words ~DONTKNOW~ were
    transmitted in this message.  An interesting thing happens if we shift this
    phrase by $4$ letters and then "subtract"  the shifted version from the
    original: ~DONTKNOW-KNOW____~ becomes ~TBZX____~.  Why is this important?
    Because the same sequence also shows up if we apply the same operation to
    the ciphertext.  This means that the position of the ciphertext that
    corresponds to ~TBZK~ in the difference must also be the location of the
    word ~KNOW~.  If we subtract the word ~KNOW~ from its corresponding
    ciphertext, we get the keyword used to encrypt the message.  And once we
    know the keyword, we can decrypt the rest of the message.
** <2025-06-18 Wed>
   Suppose that Alice and Bob want to send a message to each other across a
   noisy room, but they don't want anyone else to be able to understand what the
   message says.  They are also unable to get close enough to each other to
   relay the message in person, so they must rely on /public-key cryptography/
   to securely relay their information.

   Public-key cryptography works by creating a *private key* and a *public key*
   for every individual.  If Alice wants to send a message to Bob, then she can
   encrypt the message using Bob's public key and send it along.  Once Bob
   receives the message, they can decrypt the message with their own private
   key.  A nice example of this process is outlined [[https://crypto.mste.illinois.edu/][here]], and an
   encryption/decryption app is located [[https://crypto.mste.illinois.edu/encryption][here]].

   Public-key cryptography relies on properties of prime numbers to work
   securely.  In particular, the fact that multiplication is quick and factoring
   is difficult (or at least seems to be difficult) is essential.  The RSA
   algorithm is the oldest and one of the most widely used public-key
   cryptosystems and has two components: /key generation/ and
   /encryption-decryption/.  For more, you can view Chapter 8 of [[https://cacr.uwaterloo.ca/hac/about/chap8.pdf][The Handbook of
   Applied Cryptography]].  For key generation for person $A$:
   1. Generate two distinct primes $p$ and $q$ that are roughly the same size.
      The larger they are, the harder your key will be to crack.
   2. Set $n = pq$ and $\phi = (p-1)(q-1)$.
   3. Select an integer $e_A$ between $1$ and $\phi$ such that the greatest
      common divisor of $e_A$ and $\phi$ is equal to $1$.
   4. Find the unique integer $d_A$ between $1$ and $\phi$ such that $d_Ae_A =
      1\mod\phi$.  Your public key is $(n, e_A)$ and your private key is $d_A$.
   To encrypt a message from person $A$ to person $B$:
   1. Person $A$ should obtain person $B$'s public key $(n, e_B)$.
   2. Now, $A$ should take their message (viewed as an integer $m$ in
      $\mathbb{Z}_n$) and compute $c = m^e_B\mod n$.  This represents the
      ciphertext of the plaintext message $m$ and is transmitted to person $B$.
   3. Finally, person $B$ can decrypt the message by raising it to their own
      secret key: $m = c^d_B \mod n$.

   *Example*: Create your own private and public keys using $p = 7121$ and $q =
    6577$ and then use it to encrypt/decrypt a message.
   #+begin_src python :results output :export both
     import random
     from math import gcd

     p = 7121
     q = 6577

     n = p*q
     phi = (p - 1)*(q - 1)

     # The code below picks a random value for e, but we need to make sure
     # that the greatest common divisor of e and phi is equal to 1
     while True:
         e = random.randint(1, phi)
         if gcd(e, phi) == 1:
             break

     # Now we construct d so that de = 1 mod phi
     d = pow(e, -1, phi) # Computes e^-1 mod phi
     print(f"My public key times my private key is {d*e % phi}.")

     print(f"My public key is ({n}, {e}).")

     # At this point you have everything you need to create your public-key
     # cipher.  Try encoding the message below using someone else's public
     # key and then send the resulting ciphertext to them.  If they can
     # decrypt it using their own private key, you're good!
     message = 12
   #+end_src

   #+RESULTS:
   : My public key times my private key is 1.
   : My public key is (46834817, 42296461).
** <2025-06-20 Fri>
   *Example* (/requires algebra!/): explain why knowing $p$ and $q$ is enough to
    crack any cryptosystem like the above.  /Hint/: you need to see if you can
    solve for $d$ in terms of $e$, $p$ and $q$ using the fact that $de =
    1\mod\phi$.

   Since it's basically trivial to find the private key given knowledge of the
   primes $p$ and $q$ used to create the public key, we want to generate a new
   set of primes for each key we create.  One approach to doing so relies on
   generating random integers and then checking if the integers generated are
   actually prime (go figure).  This requires using a /primality test/ to check
   if the resulting integers are actually prime.  An old yet useful test is
   provided by *Fermat's Theorem*:
   #+begin_quote
   If $p$ is a prime number, then $a^p - a$ is a multiple of $p$ for any integer
   $a$.  Equivalently, if $p$ is prime then $a^p = a \mod p$.
   #+end_quote
   Note that this test doesn't tell us precisely when a number is prime, but it
   can let us know if a number is composite.  A relatively simple way to use
   this test to determine if a given number $p$ is prime is as follows:
   1. Decide how many tests you want to run using Fermat's Theorem.  Call this
      number $n$.
   2. For $i=1$ to $n$, do the following:
      1) Pick a random integer between $2$ and $p - 2$.
      2) Set $r = a^{p-1} \mod p$.
      3) If $r\neq 1$, STOP. You now know that $p$ is composite.  Otherwise,
         repeat from above and pick another random integer between $2$ and $p -
         2$.

   *Example*: Create a function ~fermat~ that implements the primality test
    above, then try applying your function to test whether or not the numbers
    $99$, $143$ and $561$ are prime.

   *Example*: Create a functions ~rsa_encode~ and ~rsa_decode~ to encode and
    decode messages using the RSA public key cryptosystem.  To help transform
    your messages into integers (which is where the magic happens), the
    following ~int_to_string~ and ~string_to_int~ functions have been provided,
    along with code checking if the length of the message is appropriate given
    your choice of public key.

    You should also test encoding/decoding messages by using [[https://docs.google.com/spreadsheets/d/1SSRPpVFkYkC3gRzlxZRsxKzPYyUtbbdyk9YBlAQOGTQ/edit?usp=sharing][this Google Sheets
    document]].  You will want to paste your public key $(n, e)$ into this sheet
    along with any encrypted message you'd like to send to someone else.
    #+begin_src python :results output :exports code
      import math
      import random
      import sympy as sp

      message = "Howdy"

      def string_to_int(s):
          return int.from_bytes(s.encode(), byteorder='little')

      def int_to_string(i):
          length = math.ceil(i.bit_length() / 8)
          return i.to_bytes(length, byteorder='little').decode()

      print(f"Message: {message}")
      print(f"Integer: {string_to_int(message)}")
      print(f"Message again: {int_to_string(string_to_int(message))}")

      # Whatever n is, it must be larger than the integer value of your
      # message.  Otherwise, your message will not be properly encoded.
      # This function will help you check if the message you want to send to
      # someone else is compatible with their public key.

      def message_length_check(n, message=[]):
          """Check if key is large enough for given message.  If no message
          is provided, then the function only returns the maximum possible
          size of a message you can send with the given public key.

          """
          print(f"Since n={n}, any message you send must be less than {n.bit_length()//8} bytes.")
          if len(message) != 0:
              print(f"Your message is {len(message.encode())} bytes long.")

              if n < string_to_int(message):
                  raise ValueError("Warning! Your message is too long for this public key.")

      # The code below picks a random value for e, but we need to make sure
      # that the greatest common divisor of e and phi is equal to 1
      def rsa_keygen(a=1e7, b=1e8):
          """
          Generate public and private keys using p and q.
          """
          p = sp.randprime(a, b)
          q = sp.randprime(a, b)

          n = p*q
          phi = (p - 1)*(q - 1)
          while True:
              e = random.randint(1, phi)
              if math.gcd(e, phi) == 1:
                  break

          # Now we construct d so that de = 1 mod phi
          d = pow(e, -1, phi) # Computes e^-1 mod phi
          if d*e % phi != 1:
              raise ValueError("Unable to generate private key.")

          print(f"My public key is ({n}, {e}).")
          print(f"This public key can support message lengths up to {n.bit_length()//8} bytes.")

          return n, e, d

      def encode_msg(msg, n, e):
          """Use public keys n and e to encode a message.  This function
          makes use of string_to_int() to convert a string to an integer
          before performing the encryption.  Note that the values of n and e
          that you use here must be the public key of the recipient you
          intend to send your message to.

          """
          message_length_check(n, msg)

          message = string_to_int(msg)
          ciphertext = pow(message, e, n)

          return ciphertext

      def decode_msg(cipher, n, d):
          """Decode ciphertext encrypted using your public key.  The value
          of n and d must be your own values generated above.

          """
          message = pow(cipher, d, n)
          plaintext = int_to_string(message)

          return plaintext
    #+end_src

    #+RESULTS:
    : Message: Howdy
    : Integer: 521376591688
    : Message again: Howdy
    : Warning! Your message is too long for this public key.
    : Since n=46834817, any message you send must be less than 3 bytes.
    : Your message is 5 bytes long.

* Discrete mathematics
  :PROPERTIES:
  :EXPORT_FILE_NAME: discrete
  :END:
  Lectures for computer science summer gifted program.
** <2025-06-16 Mon>
   - Consider the problem of counting all multiples of $3$ or $5$ located below
   $1000$.  We'd like to solve this with a computer, but first we need to
   translate this into a form our computer program (Python) can understand.
   Therefore, it's not a bad idea to follow the workflow below:
   1. If the problem is too complicated, try to solve a simpler version of the
      problem.  Try multiple versions until you're confident you have a strategy
      that will work in general.  In particular, you want to make sure your
      strategy can appropriate deal with any /edge cases/.
   2. Try writing down the exact steps of your solution in good detail.  You
      will need a concrete description of your solution (i.e., an *algorithm*)
      to implement in your program.
   3. Convert each step of your algorithm into an appropriate section of
      computer code.  If you find this difficult to do at a particular step, it
      might mean you need to break this step into several simpler steps.

   For the previous problem of counting multiples, here is one potential
   algorithm:
   1. Count all the multiples of $3$ that are below $1000$.  Call this number
      $n_1$.
   2. Count all the multiples of $5$ that are below $1000$.  Call this number
      $n_2$.
   3. Count all the multiples of $3$ and $5$ that are below $1000$.  Call this
      number $n_3$.
   4. Compute $n_1 + n_2 - n_3$.


   - For another problem (also taken from [[https://projecteuler.net/][Project Euler]]), define the value of
     the $n^\text{th}$ *Fibonacci number* by the equations

   $$F_0 = 1, F_1 = 2\text{ and } F_n = F_{n-1}+F_{n-2}.$$

   Find the sum of the *even-valued* Fibonacci numbers that
   do not exceed $4000000$.
** <2025-06-17 Tue>
   Number theory is the study of the set of natural numbers $\mathbb{N}$, which
   for us is just the set of nonnegative whole numbers.  Since the prime numbers
   are the "building blocks" of every positive integer, number theory pays
   special attention to these numbers and the related concept of /divisibility/.
   In particular, we say that $j$ *divides* $k$ if there is a whole number $m$
   such that $k = mj$.  For instance, $2\mid 4$ and $15\mid60$ but $8\nmid20$.

   We can use Python to check if one number divides another quite easily using
   the *modulo* operator ~%~:
   #+begin_src python :exports both :results yes
     4%2 # = 0 since 2 | 4
     60%15 # = 0 since 15 | 60%15
     20%8 # does NOT equal 0 since 8 does not divide 20
   #+end_src

   *Example*: What does the modulo operator represent?  For example, if ~n%4~
    evaluates to $3$ for some mystery number $n$, what does this tell us about
    $n$?

   *Example*: What are all of the possible values of ~n%4~?  What about ~n%6~?

   Arithmetic with the modulo operator is called *modular arithmetic*.  We
   denote the result of ~k%n~ with the notation $k\mod n$.

   *Example*: Find $9\mod 5$ and $4452 \mod  71$.

   *Example*: If $k$ is a number that is a multiple of $3$ (i.e., $3\mid k$),
    what is true about $k\mod 3$?  What about the sum of its digits modulo $3$?

   An important property of modular arithmetic is that it "respects" regular
   arithmetic: if $a+b=c$ then $(a+b)\mod n = c \mod n$.

   *Example*: Modular arithmetic has applications in diverse fields of
    mathematics and its applications.  One important example lies in /error
    correcting codes/.  For example, the ISBN-10 is a ten digit number that is
    used to identify a specific text.  However, this can't be any ten digit
    number as some structure is required to help with identification.  A certain
    (amazing) book has ISBN given by $0691175918$.  To check that this is a
    valid ISBN, we multiply each digit by a decreasing sequence starting at 10,
    and then check if the result is a multiple of $11$:
    #+begin_src python :results output :exports both
      # isbn = 0691175918

      checksum = 10*0 + 9*6 + 8*9 + 7*1 + 6*1 + 5*7 + 4*5 + 3*9 + 2*1 + 1*8
      print(checksum%11)
    #+end_src

    #+RESULTS:
    : 0

    *Example*: Is $0416522351$ a valid ISBN-10 number?

    *Example*: Suppose that a book has a partial ISBN-10 number given by
     $030654401?$, where the last digit is unreadable.  What must the last
     digit be?

    The value of $k\mod n$ can be found using the *division algorithm*, which
    is one of the oldest and most important algorithms in mathematics.

    *Example*: Implement the division algorithm in Python.  As an example of
    what your algorithm should be capable of, ~division(45322, 21)~ should
    return the following values for the quotient $q$ and remainder $r$:

    #+begin_src python :exports results :results output
      def division(m, n):
        if m%1 != 0 or n%1 != 0 or m < 0 or n < 0:
          raise ValueError('Please enter nonnegative integers!')
        else:
          q = 0
          r = m
          while r >= n:
            q = q+1
            r = m - q*n

          return q, r

      print(division(45322, 21))
    #+end_src

    #+RESULTS:
    : (2158, 4)

     Modular arithmetic is also useful when dealing with /cyclic/ quantities.

    *Example*: A video game puzzle involves rotating three concentric rings so
     that their platforms line up.  At the start of the puzzle, the platforms
     are pointing east.  To solve the puzzle, all the platforms must be pointing
     south.  If moving a ring moves its adjacent circles in the opposite
     direction by the same amount, what moves will solve the puzzle?

     *Answer*: The puzzle is equivalent to solving the system of equations given
      by

      $$-x-y=1, -x+y-z=1, -y+z=1$$

      over $\mathbb{Z}_4$, where $x$ is the number of moves required of the
      inner ring, $y$ the middle and $z$ the outer.  This can easily be done
      using Python:
     #+begin_src python :results none :exports code
       from sympy import solve
       from sympy.abc import x, y, z

       print(solve([-x-y-1, -x+y-z-1, -y+z-1], [x,y,z]))
     #+end_src

    The Caesar cipher (and Vigenere cipher) is also an application of modular
    arithmetic.

    *Example*: Create a Python program that implements the Caesar cipher.  The
     program should be able to take a given string and a given rotation value
     and return the encrypted version of that string.

    *Example*: An *affine cipher* is a modified form of the Caesar cipher that
    makes use of multiplication as well as addition to shift letters around.
    These ciphers take the form $f(x) = ax + b \mod 26$ when using the English
    alphabet.  Modify your code from the last example to create an affine
    cipher.

    Modular arithmetic is also useful in the construction of *one-way
    functions*, which are tools to verify correctness or integrity of some
    transmission.  For example, a recipient can use a one-way function to verify
    that they have successfully decrypted a message without referring to the
    message itself.  A good one-way function should be easy to compute but very
    difficult to invert.

    *Example*: Create a one-way function $f(x)$ as follows: let $n = 894847$ and
     define $f(x) = x^3 \mod n$ for $x$ in $\mathbb{Z}_n$.  Use this function to
     determine which other group in class was given the same number as you.
* Number Theory
  :PROPERTIES:
  :EXPORT_FILE_NAME: number-theory
  :END:
** <2025-06-23 Mon>
  The mathematical basis for the cryptographic systems we looked at was modular
  arithmetic.  This type of arithmetic is based on computing remainders, and so
  prime numbers play an essential part here.

  Perhaps the two most important facts we use when working with modular
  arithmetic are the following: modular arithmetic respects regular addition;
  and modular arithmetic respects regular multiplication.  Both facts follow
  from the division algorithm.

  *Example*: Let $n$ be a nonnegative integer and let $a = b\mod n$ and $c =
   d\mod n$.  Show that $a+c = b+d \mod n$.

  /Answer/: Remainders!

  When we looked at RSA public key cryptography, we needed to be able to find
  two integers $e$ and $d$ such that $ed = 1 \mod \phi$.  If you look at the
  code we used for that, we only required that $\gcd(e, \phi) = 1$.  In
  particular, if two numbers have no common factors aside from $1$, then we can
  find this "modular inverse."

  *Example*: Find $3^{-1}\mod 8$ and $4^{-1}\mod 6$ if possible.

  The existence of these inverses can be proved in general using /Bezout's
  Identity/, which states the following:
  #+begin_quote
  If $a,b$ are integers and $\gcd(a,b) = d$, then there exist integers $r,s$
  such that $ra+sb = d$.
  #+end_quote

* Numerical Analysis
  :PROPERTIES:
  :EXPORT_FILE_NAME: numerical-analysis
  :END:
** <2025-06-18 Wed>
  Many mathematical models are written in terms of *differential equations*.
  These are equations that describe how some quantity $y$ changes over time (or
  position, or...).  A simple example of such an equation is $y' = y$ where
  $y(x)$ is some (for now) unknown function.

  Many differential equations are difficult if not impossible to solve exactly,
  and so numerical approaches have been developed for estimating solutions to
  these equations.  In these notes we're going to look at how we can implement
  some of these approaches here.

  *Euler's Method* is probably the simplest method to approximate the solution
   of a differential equation.  For this method, we usually have some initial
   data (represented as a point $(x_0, y_0)$) and we want to figure out $y(x)$
   for some other value of $x$.  We can try to estimate $y(x)$ by using
   information about how $y$ changes (it's differential equation!) and by
   choosing a step-size $h$.  Euler's Method can be effective on equations of
   the form $y' = f(t, y), y(t_0) = y_0$.
** <2025-06-19 Thu>
  *Example*: A car leaves Buckhannon at 12 p.m.  You happen to know how fast the
  car is traveling at 1 p.m., 2 p.m., 3 p.m. and 4 p.m.:
  | time        | 12 |  1 |  2 |  3 |  4 |
  | speed (mph) | 60 | 45 | 55 | 50 | 60 |
  How far away is the car from Buckhannon at 5 p.m., assuming that the car is
  always moving in the same direction?
  #+begin_src python
    # NumPy helps us out with doing the actual calculations
    import numpy as np

    # We need to set up some data for NumPy to use.
    velocities = np.array([60, 45, 55, 50, 60])
    times = np.linspace(0, 4, num=5)
  #+end_src

  *Example*: Write a function in Python ~euler_m~ that implements Euler's
  Method.
  #+begin_src python :results output
    import numpy as np

    def euler_m(f, t0, y0, h, n):
        tn, yn = t0, y0

        for i in range(n):
            yn = yn + h*f(tn, yn)
            tn = tn + h

        return np.array([tn, yn])

    def f(t, y):
        return y

  #+end_src
** <2025-06-23 Mon>
  Numerical analysis is generally concerned with how to efficiently solve or
  approximate solutions of mathematical problems.  Efficiency does not just mean
  accuracy!  We are also concerned with computational costs and ease of
  implementation.

  A common use of numerical analysis is in solving algebraic equations that are
  difficult if not impossible to solve exactly.

  *Example*: Solve $x^3 - 3x + 1= 0$.
  #+begin_src python :results output :exports both
    import matplotlib.pyplot as plt
    import numpy as np

    x = np.linspace(-2, 2)
    y = x**3 - 3*x + 1

    plt.axhline(0, color="k")
    plt.axvline(0, color="k")
    plt.grid()
    plt.plot(x, y, "b")
    plt.show()
  #+end_src

  #+RESULTS:

  The above algorithm has two very useful characteristics: given that our
  function is "continuous" we can estimate how far away we are from a solution
  at each step (the *error*).  Also, we know that the error is approaching $0$,
  which means that our algorithm produces values that will at worst get
  arbitrarily close to the solution.

  *Example*: How many steps of the above algorithm must be used to guarantee
   that we are within $0.01$ of the true value of the solution of $x^3 - 3x + 1
   = 0$ in the interval $[1, 2]$?

  Recursive procedures like the above are common in numerical analysis, as they
  allow us to take a complicated problem and break it into simpler versions of
  itself.  Many important mathematical functions and constants can also be
  defined recursively.

  *Example*: The *factorial function*, $n!$, is defined recursively as follows:
  1. if $n > 1$ then $n! = n(n-1)!$.  This is a /recurrence relation/.
  2. if $n = 0$ then $0! = 1$.  This is a /base case/.
  Implement this function in Python.

  *Example*: The $n$th Fibonacci number is given by the recurrence relation
  $$F_n = F_{n-1} + F_{n-2}$$
  with base cases $F_0 = F_1 = 1$.  Write a Python function that implements this
  definition to compute the $n$th Fibonacci number.

  *Example*: (taken from /Tea Time for Numerical Analysis/, pg. 37) What is the
   minimum number of moves required to solve the Tower of Hanoi puzzle using
   three disks?  What is the minimum number of moves to solve the puzzle if it
   involves four disks instead?  You can use the web app located [[https://www.mathsisfun.com/games/towerofhanoi.html][here]] to help
   you answer this question.

  Recursion also shows up quite a bit in mathematical arguments.  In this case,
  we call it /induction/.

  *Example*: Explain why any polygon can be /triangulated/, i.e., divided into
   triangles.
