#+TITLE: Summer Gifted Notes 2025
#+AUTHOR: Jesse Oldroyd
* Cryptography
  :PROPERTIES:
  :EXPORT_FILE_NAME: cryptography
  :END:
  Lectures for mathematics summer gifted program.
** <2025-06-16 Mon>
   - Python code for substitution cipher:
   #+begin_src python :results output :session yes :exports both
     import random

     letters = list('abcdefghijklmnopqrstuvwxyz')
     letters_cipher = letters.copy()
     random.shuffle(letters_cipher)

     encryption_key = {}
     decryption_key = {}
     for l1, l2 in zip(letters, letters_cipher):
         encryption_key[l1] = l2
         decryption_key[l2] = l1

     def substitution_encrypt(plaintext, encryption_key):
         plaintext = plaintext.lower()
         ciphertext = ""

         for letter in plaintext:
             if letter in encryption_key.keys():
                 ciphertext += encryption_key[letter]
             else:
                 ciphertext += letter

         return ciphertext

     def substitution_decrypt(ciphertext, decryption_key):
         ciphertext = ciphertext.lower()
         plaintext = ""

         for letter in ciphertext:
             if letter in decryption_key.keys():
                 plaintext += decryption_key[letter]
             else:
                 plaintext += letter

         return plaintext

     message = "This is my message."
     encrypted_message = substitution_encrypt(message, encryption_key)
     decrypted_message = substitution_decrypt(encrypted_message, decryption_key)

     print(f"Message: {message}")
     print(f"Ciphertext: {encrypted_message}")
     print(f"Plaintext: {decrypted_message}")
   #+end_src

   #+RESULTS:
   : Message: This is my message.
   : Ciphertext: fzty ty ce cxyypbx.
   : Plaintext: this is my message.

   - [[https://pi.math.cornell.edu/~mec/2003-2004/cryptography/subs/frequencies.html][Frequency diagram]] for letters of the English language.

   - *Example*: The following message has been encrypted using a substitution
     cipher: 'ykbk nk vbk, og pijlyvggcg, nktz qobaogov.'
     Decrypt this message.

     /Answer/: The frequency diagram above gives us some clues as to what each
     letter could represent.  In particular, since ~e~ is the most common letter
     of the English alphabet and ~g~ and ~k~ are frequent letters in the above
     message, we can try to replace either of these letters (but not both!) with
     ~e~:
     #+begin_src python :session yes :exports both
       ciphertext = 'ykbk nk vbk, og pijlyvggcg, nktz qobaogov'
       decrypt2 = {'k':'e'} # Try replacing k with e
       substitution_decrypt(ciphertext, decrypt2)
     #+end_src

     #+RESULTS:
     : yebe ne vbe, og pijlyvggcg, netz qobaogov

     Since the first word becomes ~yebe~, we now look for a four-letter word in
     English that has an ~e~ in the second and last entries.  One example, after
     some trial and error, is ~here~.  So now we try replacing ~y~ with ~h~ and
     ~b~ with ~r~:
     #+begin_src python :session yes :exports both
       decrypt2['y'] = 'h'
       decrypt2['b'] = 'r'
       substitution_decrypt(ciphertext, decrypt2)
     #+end_src

     #+RESULTS:
     : here ne vre, og pijlhvggcg, netz qoraogov

     Now the first phrase in this message looks like it could be "here we are",
     and so we continue with these substitutions:
     #+begin_src python :session yes :exports both
       decrypt2['n'] = 'w'
       decrypt2['v'] = 'a'
       substitution_decrypt(ciphertext, decrypt2)
     #+end_src

     #+RESULTS:
     : here we are, og pijlhaggcg, wetz qoraogoa

     A natural word that follows the phrase "here we are" is "in", so once again
     we add those letters to our key:
     #+begin_src python :session yes :exports both
       decrypt2['o'] = 'i'
       decrypt2['g'] = 'n'
       substitution_decrypt(ciphertext, decrypt2)
     #+end_src

     #+RESULTS:
     : here we are, in pijlhanncn, wetz qirainia

     A little bit more trial and error gives the (likely) decrypted message:
     "here we are, in Buckhannon, West Virginia".
** <2025-06-17 Tue>
   A *Caesar cipher* is an ancient cryptographic technique that represents a
   special case of the substitution cipher mentioned above.  Also called a
   /shift cipher/, this cipher simply shifts each letter of the alphabet down by
   a certain amount:
   | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z |
   | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | a | b | c |

   The above table is an example of a ~ROT3~ Caesar cipher since each letter was
   shifted three letters along the alphabet.
* Discrete mathematics
  :PROPERTIES:
  :EXPORT_FILE_NAME: discrete
  :END:
  Lectures for computer science summer gifted program.
** <2025-06-16 Mon>
   - Consider the problem of counting all multiples of $3$ or $5$ located below
   $1000$.  We'd like to solve this with a computer, but first we need to
   translate this into a form our computer program (Python) can understand.
   Therefore, it's not a bad idea to follow the workflow below:
   1. If the problem is too complicated, try to solve a simpler version of the
      problem.  Try multiple versions until you're confident you have a strategy
      that will work in general.  In particular, you want to make sure your
      strategy can appropriate deal with any /edge cases/.
   2. Try writing down the exact steps of your solution in good detail.  You
      will need a concrete description of your solution (i.e., an *algorithm*)
      to implement in your program.
   3. Convert each step of your algorithm into an appropriate section of
      computer code.  If you find this difficult to do at a particular step, it
      might mean you need to break this step into several simpler steps.

   For the previous problem of counting multiples, here is one potential
   algorithm:
   1. Count all the multiples of $3$ that are below $1000$.  Call this number
      $n_1$.
   2. Count all the multiples of $5$ that are below $1000$.  Call this number
      $n_2$.
   3. Count all the multiples of $3$ and $5$ that are below $1000$.  Call this
      number $n_3$.
   4. Compute $n_1 + n_2 - n_3$.


   - For another problem (also taken from [[https://projecteuler.net/][Project Euler]]), define the value of
     the $n^\text{th}$ *Fibonacci number* by the equations

   $$F_0 = 1, F_1 = 2\text{ and } F_n = F_{n-1}+F_{n-2}.$$

   Find the sum of the *even-valued* Fibonacci numbers that
   do not exceed $4000000$.
