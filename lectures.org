#+TITLE: Summer Gifted Notes 2025
#+AUTHOR: Jesse Oldroyd
* Cryptography
  :PROPERTIES:
  :EXPORT_FILE_NAME: cryptography
  :END:
  Lectures for mathematics summer gifted program.
** <2025-06-16 Mon>
   - Python code for substitution cipher:
   #+begin_src python :results output
     import random

     letters = list('abcdefghijklmnopqrstuvwxyz')
     letters_cipher = letters.copy()
     random.shuffle(letters_cipher)

     print(letters)
     print(letters_cipher)

     encryption_key = {}
     decryption_key = {}
     for l1, l2 in zip(letters, letters_cipher):
         encryption_key[l1] = l2
         decryption_key[l2] = l1

     def substitution_encrypt(plaintext, encryption_key):
         plaintext = plaintext.lower()
         ciphertext = ""

         for letter in plaintext:
             if letter in encryption_key.keys():
                 ciphertext += encryption_key[letter]
             else:
                 ciphertext += letter

         return ciphertext

     def substitution_decrypt(ciphertext, decryption_key):
         ciphertext = ciphertext.lower()
         plaintext = ""

         for letter in ciphertext:
             if letter in decryption_key.keys():
                 plaintext += decryption_key[letter]
             else:
                 plaintext += letter

         return plaintext

     message = "This is my message."
     encrypted_message = substitution_encrypt(message, encryption_key)
     decrypted_message = substitution_decrypt(encrypted_message, decryption_key)

     print(f"Message: {message}")
     print(f"Ciphertext: {encrypted_message}")
     print(f"Plaintext: {decrypted_message}")
   #+end_src

   #+RESULTS:
   : ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
   : ['m', 'l', 'a', 'g', 'j', 'd', 'b', 'x', 'y', 's', 'e', 'n', 'h', 'o', 'v', 'k', 'c', 't', 'w', 'p', 'r', 'u', 'f', 'z', 'i', 'q']

   - [[https://pi.math.cornell.edu/~mec/2003-2004/cryptography/subs/frequencies.html][Frequency diagram]] for letters of the English language.

   - *Example*: The following message has been encrypted using a substitution
     cipher: 'ykbk nk vbk, og pijlyvggcg, nktz qobaogov.'
     Decrypt this message.
* Discrete mathematics
  :PROPERTIES:
  :EXPORT_FILE_NAME: discrete
  :END:
  Lectures for computer science summer gifted program.
** <2025-06-16 Mon>
   - Consider the problem of counting all multiples of $3$ or $5$ located below
   $1000$.  We'd like to solve this with a computer, but first we need to
   translate this into a form our computer program (Python) can understand.
   Therefore, it's not a bad idea to follow the workflow below:
   1. If the problem is too complicated, try to solve a simpler version of the
      problem.  Try multiple versions until you're confident you have a strategy
      that will work in general.  In particular, you want to make sure your
      strategy can appropriate deal with any /edge cases/.
   2. Try writing down the exact steps of your solution in good detail.  You
      will need a concrete description of your solution (i.e., an *algorithm*)
      to implement in your program.
   3. Convert each step of your algorithm into an appropriate section of
      computer code.  If you find this difficult to do at a particular step, it
      might mean you need to break this step into several simpler steps.

   For the previous problem of counting multiples, here is one potential
   algorithm:
   1. Count all the multiples of $3$ that are below $1000$.  Call this number
      $n_1$.
   2. Count all the multiples of $5$ that are below $1000$.  Call this number
      $n_2$.
   3. Count all the multiples of $3$ and $5$ that are below $1000$.  Call this
      number $n_3$.
   4. Compute $n_1 + n_2 - n_3$.


   - For another problem (also taken from [[https://projecteuler.net/][Project Euler]]), define the value of
     the $n^\text{th}$ *Fibonacci number* by the equations

   $$F_0 = 1, F_1 = 2\text{ and } F_n = F_{n-1}+F_{n-2}.$$

   Find the sum of the *even-valued* Fibonacci numbers that
   do not exceed $4000000$.
