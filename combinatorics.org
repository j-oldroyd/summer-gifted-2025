# Created 2025-06-25 Wed 12:48
#+title: Combinatorics
#+author: Jesse Oldroyd
* <2025-06-19 Thu>
*Combinatorics* is the mathematics of counting objects.  It's generally a lot
 harder than it sounds!

*Example*: Try answering the following questions:
1. How many batting lineups are possible from a nine-player roster in
   baseball?
2. How many three letter "words" can be formed from the letters $A, B, C$?
3. If two nickels, three dimes and seven pennies, in how many ways can you
   make 22 cents?
4. In how many ways can you use nickels, dimes and pennies to make 22 cents
   in change?

Counting problems can have different features that affect the count, such as
whether or not order matters, or whether or not we "draw without
replacement."

A *set* is a collection of elements, often denoted using curly braces: $\{1,
   2, 3\}$ is one example of a set, as is $\mathbb{Z}_7 = \{0, 1, 2, 3, 4, 5,
   6\}$.  The *empty set* is the unique set which contains no elements:
$\emptyset = \{ \}$.  A *subset* of another set is just a set that contains
none, some or all elements from that set: $\{0, 1\}$ is a subset of
$\mathbb{Z}_7$ but not of $\{1, 2, 3\}$.

*Example*: How many subsets can you find for $\{1, 2\}$?  What about $\{1, 2,
    3, 4\}$?  Can you find a general formula?

/Answer/: A set with $n$ elements has $2^n$ subsets.
* <2025-06-20 Fri>
The batting order example and the subset example here are respectively
examples of *permutations* and *combinations*.  Both are examples of counts
/without/ replacement, but order matters for permutations whereas order
doesn't matter for combinations.

*Example*: Given $3$ distinct objects, in how many ways can they be
 arranged?  What if you had $10$ distinct objects?  What if you had $n$?

The number of permutations of $n$ distinct objects is denoted by $_nP_n$.
In the last example, you found $_3P_3, _{10}P_{10}$ and $_nP_n$.

*Example*: How many four digit numbers are there that use the digits $1$
 through $9$, but no digit shows up more than once?

The number of combinations of $k$ objects from $n$ total distinct objects is
denoted by $_nC_k$ or $\binom{n}{k}$ (read as "$n$ choose $k$").  These
numbers are also sometimes called binomial coefficients.

*Example*: Find the number of subsets of $\{1, 2, 3\}$ of size $2$ and
 write this as an appropriate binomial coefficient.

*Example*: Find a formula for $\binom{n}{k}$.
* <2025-06-23 Mon>
Counting hands in poker is a good test and application of counting with
combinations.
* <2025-06-24 Tue>
A *generating function* for a sequence of numbers is a polynomial (or series)
whose coefficients are exactly the terms of the sequence in order.  For
example, the generating function of the sequence $\binom{n}{k}$ is given by
$(1+x)^n$.  For example, expanding $(1 + x)^4$ gives a polynomial whose
coefficients are all the values of $\binom{4}{k}$.
#+begin_src python :results output :exports both
  import sympy as sp
  x = sp.Symbol('x')  # Create the variable x

  print(sp.expand((1 + x)**4))  # Coefficients are 4 choose k
#+end_src

#+results: 
: x**4 + 4*x**3 + 6*x**2 + 4*x + 1


*Example*: Find $\binom{7}{3}$ by computing $(1 + x)^7$.

*Example*: Simplify $x^5 + 5x^4 + 10x^3 + 10x^2 + 5x + 1$.

To see why $(1 + x)^n$ is the generating function for $\binom{n}{k}$, it
might be helpful to consider all of the possible products of $(x + y)^n$.

Many counting problems can be solved by considering their generating
functions instead.  For one example, we can look at the problem of making 22
cents in change from two nickels, three dimes and seven pennies.  The
generating function for this counting problem has three different components,
one for each type of object we're using in our count:
| coin    | generating function                |
|---------+------------------------------------|
| pennies | $1 + x + x^2 + x^3 + \cdots + x^7$ |
| nickels | $1 + x^5 + x^{10}$                 |
| dimes   | $1 + x^{10} + x^{20} + x^{30}$     |
If we multiply these polynomials together, we get the generating function for
this problem:
#+begin_src python :results output :exports both
  # You can paste this code into the Thonny editor window to run it.  If
  # you use the shell instead (the Thonny window with ">>>"), then you
  # should run each line of code as a separate command.
  import sympy as sp
  x = sp.Symbol('x')

  # Create polynomials
  pennies = sum([x**k for k in range(8)])
  nickels = 1 + x**5 + x**10
  dimes = 1 + x**10 + x**20 + x**30

  generating_function = pennies * nickels * dimes

  print(f"The generating function is {sp.expand(generating_function)}.")
  print(f"The coefficient of x^22 is {sp.expand(generating_function).coeff(x, 22)}.")
#+end_src

#+results: 
: The generating function is x**47 + x**46 + x**45 + x**44 + x**43 + 2*x**42 + 2*x**41 + 2*x**40 + x**39 + x**38 + 3*x**37 + 3*x**36 + 3*x**35 + 2*x**34 + 2*x**33 + 3*x**32 + 3*x**31 + 3*x**30 + x**29 + x**28 + 3*x**27 + 3*x**26 + 3*x**25 + 2*x**24 + 2*x**23 + 3*x**22 + 3*x**21 + 3*x**20 + x**19 + x**18 + 3*x**17 + 3*x**16 + 3*x**15 + 2*x**14 + 2*x**13 + 3*x**12 + 3*x**11 + 3*x**10 + x**9 + x**8 + 2*x**7 + 2*x**6 + 2*x**5 + x**4 + x**3 + x**2 + x + 1.
: The coefficient of x^22 is 3.
* <2025-06-25 Wed>
*Example*: The largest amount of change you can make using seven pennies, two
nickels and three dimes is 47 cents.  What is the largest amount of change
you can make with these coins in more than one way?

*Example*: Suppose that you have one box $10$ red chips in it, another box
with $5$ green chips, and yet another box with $8$ blue chips.  In how many
ways can you select $15$ chips total where at least $2$ are red and at least
$3$ are blue?

/Answer/: Use generating functions!
#+begin_src python :results output :exports both
  # You can paste this code into the Thonny editor or the shell.  If you
  # paste into the shell, you should run one command at a time.  import
  # sympy as sp x = sp.Symbol('x')

  # You will need to enter the correct functions for each of the
  # following colors.  The current values are just placeholders to make
  # sure that this code runs without error.  red = 1 green = 1 blue = 1

  gen_func = red * green * blue print(f"The generating function is
  {sp.expand(gen_func)}.")
#+end_src

#+results: 

These problems can get a little more complicated if we remove some
restrictions.

*Example*: Count the number of ways there are to make 22 cents using any
number of pennies, nickels and dimes.

We can also use generating functions to find values of /sequences/, lists of
numbers defined by some equation.  For example, the generating function of
the Fibonacci numbers $0, 1, 1, 2, 3, 5, 8, 13, \ldots$ is given by
$$F(x) = \frac{x}{1 - x - x^2}.$$
You can check using SymPy (or calculus!) that the coefficients of this
fraction are actually the Fibonacci numbers:
#+begin_src python :results output :exports both
  import sympy as sp
  x = sp.Symbol('x')

  F = x/(1 - x - x**2)
  print(f"The fifth Fibonacci number is {F.series(x, 0, 10).coeff(x, 5)}.")
#+end_src

#+results: 
: The fifth Fibonacci number is 5.
