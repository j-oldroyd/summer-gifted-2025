# Created 2025-06-19 Thu 12:05
#+title: Cryptography
#+author: Jesse Oldroyd
Lectures for mathematics summer gifted program.
* <2025-06-16 Mon>
- Python code for substitution cipher:
#+begin_src python :results output :session yes :exports both
  import random

  letters = list('abcdefghijklmnopqrstuvwxyz')
  letters_cipher = letters.copy()
  random.shuffle(letters_cipher)

  encryption_key = {}
  decryption_key = {}
  for l1, l2 in zip(letters, letters_cipher):
      encryption_key[l1] = l2
      decryption_key[l2] = l1

  def substitution_encrypt(plaintext, encryption_key):
      plaintext = plaintext.lower()
      ciphertext = ""

      for letter in plaintext:
          if letter in encryption_key.keys():
              ciphertext += encryption_key[letter]
          else:
              ciphertext += letter

      return ciphertext

  def substitution_decrypt(ciphertext, decryption_key):
      ciphertext = ciphertext.lower()
      plaintext = ""

      for letter in ciphertext:
          if letter in decryption_key.keys():
              plaintext += decryption_key[letter]
          else:
              plaintext += letter

      return plaintext

  message = "This is my message."
  encrypted_message = substitution_encrypt(message, encryption_key)
  decrypted_message = substitution_decrypt(encrypted_message, decryption_key)

  print(f"Message: {message}")
  print(f"Ciphertext: {encrypted_message}")
  print(f"Plaintext: {decrypted_message}")
#+end_src

#+results: 
: Message: This is my message.
: Ciphertext: alps ps yb yvssnrv.
: Plaintext: this is my message.


- [[https://pi.math.cornell.edu/~mec/2003-2004/cryptography/subs/frequencies.html][Frequency diagram]] for letters of the English language.

- *Example*: The following message has been encrypted using a substitution
  cipher: 'ykbk nk vbk, og pijlyvggcg, nktz qobaogov.'
  Decrypt this message.

  /Answer/: The frequency diagram above gives us some clues as to what each
  letter could represent.  In particular, since ~e~ is the most common letter
  of the English alphabet and ~g~ and ~k~ are frequent letters in the above
  message, we can try to replace either of these letters (but not both!) with
  ~e~:
  #+begin_src python :session yes :exports both
    ciphertext = 'ykbk nk vbk, og pijlyvggcg, nktz qobaogov'
    decrypt2 = {'k':'e'} # Try replacing k with e
    substitution_decrypt(ciphertext, decrypt2)
  #+end_src

  #+results: 
  : yebe ne vbe, og pijlyvggcg, netz qobaogov


  Since the first word becomes ~yebe~, we now look for a four-letter word in
  English that has an ~e~ in the second and last entries.  One example, after
  some trial and error, is ~here~.  So now we try replacing ~y~ with ~h~ and
  ~b~ with ~r~:
  #+begin_src python :session yes :exports both
    decrypt2['y'] = 'h'
    decrypt2['b'] = 'r'
    substitution_decrypt(ciphertext, decrypt2)
  #+end_src

  #+results: 
  : here ne vre, og pijlhvggcg, netz qoraogov


  Now the first phrase in this message looks like it could be "here we are",
  and so we continue with these substitutions:
  #+begin_src python :session yes :exports both
    decrypt2['n'] = 'w'
    decrypt2['v'] = 'a'
    substitution_decrypt(ciphertext, decrypt2)
  #+end_src

  #+results: 
  : here we are, og pijlhaggcg, wetz qoraogoa


  A natural word that follows the phrase "here we are" is "in", so once again
  we add those letters to our key:
  #+begin_src python :session yes :exports both
    decrypt2['o'] = 'i'
    decrypt2['g'] = 'n'
    substitution_decrypt(ciphertext, decrypt2)
  #+end_src

  #+results: 
  : here we are, in pijlhanncn, wetz qirainia


  A little bit more trial and error gives the (likely) decrypted message:
  "here we are, in Buckhannon, West Virginia".
* <2025-06-17 Tue>
A *Caesar cipher* is an ancient cryptographic technique that represents a
special case of the substitution cipher mentioned above.  Also called a
/shift cipher/, this cipher simply shifts each letter of the alphabet down by
a certain amount:
| a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z |
| d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | a | b | c |

The above table is an example of a ~ROT3~ Caesar cipher since each letter was
shifted three letters along the alphabet.

*Example*: Use the ~ROT3~ cipher above to encrypt the message ~Picard is
    better than Kirk.~  What Caesar cipher is the decryption key for the ~ROT3~
 cipher?  You can use the application [[https://caesar-cipher.com/caesar-cipher-wheel][here]] to help you visualize the cipher.

*Example*: The Caesar cipher is also vulnerable to frequency analysis just
 like the substitution cipher is.  Using this, try to decrypt the following
 message encrypted using the Caesar cipher:
#+results: 
: xh pcndct tktc pqat id uxvjgt dji iwxh bthhpvt?  x'b cdi hjgt.


Part of the reason the Caesar cipher is so easy to crack, like any other
substitution cipher, is because there is a one-to-one correspondence between
letters before and after encryption.  One way to address this is to use a
combination of Caesar ciphers as in the Vigenere cipher.  Such a cipher
makes use of a table like the following to encrypt a message: [[https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher#/media/File:Vigen%C3%A8re_square_shading.svg][Vigenere
cipher]].

This encryption scheme involves first choosing a /keyword/ and then using
the keyword to determine the corresponding encryption.  For example, the
message ~I'M THE BEST AT USING MAKING SECRETS~ with the keyword ~CATS~ would
encrypt to ~KMMZGBXKCAMECKBFISYUTEMK~.  The encryption process works by
selecting a row of the above Vigenere table using an appropriate letter from
the keyword and a column using the corresponding letter of the plaintext to
produce the encrypted letter.  The decryption process works by choosing a
row of the table by using the keyword, following along the row until you hit
the ciphertext letter, and then using the column to determine the plaintext
letter.

*Example*: using the Vigenere cipher with the keyword ~BAD~, /encrypt/ the
 plaintext ~WHOYOUGONNACALL~ and /decrypt/ the ciphertext ~HOVFAKBWNT~.

The Vigenere cipher long had a reputation for being unbreakable without
knowing the keyword, but in the 19th century mathematicians developed
methods for analyzing this cipher using frequency analysis.  To get an idea
of how this analysis works, suppose that some message is encrypted with an
unknown keyword to get ~URCAFYBBIKVLURCAFYBBI~.  A segment of this coded
message is repeated, which suggests that this segment corresponds to the
same word or phrase in the original message.  The second segment starts $12$
positions after the first, and so the keyword or phrase must be either $1$,
$2$, $3$, $4$, $6$, or $12$ letters long.  Since $1$, $2$, and $3$ would be
very short (and therefore weak) keywords, one can assume that the keyword is
$4$ letters long.

Now suppose we also happen to learn that the words ~DONTKNOW~ were
transmitted in this message.  An interesting thing happens if we shift this
phrase by $4$ letters and then "subtract"  the shifted version from the
original: ~DONTKNOW-KNOW____~ becomes ~TBZX____~.  Why is this important?
Because the same sequence also shows up if we apply the same operation to
the ciphertext.  This means that the position of the ciphertext that
corresponds to ~TBZK~ in the difference must also be the location of the
word ~KNOW~.  If we subtract the word ~KNOW~ from its corresponding
ciphertext, we get the keyword used to encrypt the message.  And once we
know the keyword, we can decrypt the rest of the message.
* <2025-06-18 Wed>
Suppose that Alice and Bob want to send a message to each other across a
noisy room, but they don't want anyone else to be able to understand what the
message says.  They are also unable to get close enough to each other to
relay the message in person, so they must rely on /public-key cryptography/
to securely relay their information.

Public-key cryptography works by creating a *private key* and a *public key*
for every individual.  If Alice wants to send a message to Bob, then she can
encrypt the message using Bob's public key and send it along.  Once Bob
receives the message, they can decrypt the message with their own private
key.  A nice example of this process is outlined [[https://crypto.mste.illinois.edu/][here]], and an
encryption/decryption app is located [[https://crypto.mste.illinois.edu/encryption][here]].

Public-key cryptography relies on properties of prime numbers to work
securely.  In particular, the fact that multiplication is quick and factoring
is difficult (or at least seems to be difficult) is essential.  The RSA
algorithm is the oldest and one of the most widely used public-key
cryptosystems and has two components: /key generation/ and
/encryption-decryption/.  For more, you can view Chapter 8 of [[https://cacr.uwaterloo.ca/hac/about/chap8.pdf][The Handbook of
Applied Cryptography]].  For key generation for person $A$:
1. Generate two distinct primes $p$ and $q$ that are roughly the same size.
   The larger they are, the harder your key will be to crack.
2. Set $n = pq$ and $\phi = (p-1)(q-1)$.
3. Select an integer $e_A$ between $1$ and $\phi$ such that the greatest
   common divisor of $e_A$ and $\phi$ is equal to $1$.
4. Find the unique integer $d_A$ between $1$ and $\phi$ such that $d_Ae_A =
         1\mod\phi$.  Your public key is $(n, e_A)$ and your private key is $d_A$.
To encrypt a message from person $A$ to person $B$:
1. Person $A$ should obtain person $B$'s public key $(n, e_B)$.
2. Now, $A$ should take their message (viewed as an integer $m$ in
   $\mathbb{Z}_n$) and compute $c = m^e_B\mod n$.  This represents the
   ciphertext of the plaintext message $m$ and is transmitted to person $B$.
3. Finally, person $B$ can decrypt the message by raising it to their own
   secret key: $m = c^d_B \mod n$.

*Example*: Create your own private and public keys using $p = 7121$ and $q =
    6577$ and then use it to encrypt/decrypt a message.
#+begin_src python :results output :export both
  import random
  from math import gcd

  p = 7121
  q = 6577

  n = p*q
  phi = (p - 1)*(q - 1)

  # The code below picks a random value for e, but we need to make sure
  # that the greatest common divisor of e and phi is equal to 1
  while True:
      e = random.randint(1, phi)
      if gcd(e, phi) == 1:
          break

  # Now we construct d so that de = 1 mod phi
  d = pow(e, -1, phi) # Computes e^-1 mod phi
  print(f"My public key times my private key is {d*e % phi}.")

  print(f"My public key is ({n}, {e}).")

  # At this point you have everything you need to create your public-key
  # cipher.  Try encoding the message below using someone else's public
  # key and then send the resulting ciphertext to them.  If they can
  # decrypt it using their own private key, you're good!
  message = "123456"
#+end_src

*Example* (/requires algebra!/): explain why knowing $p$ and $q$ is enough to
 crack any cryptosystem like the above.  /Hint/: you need to see if you can
 solve for $d$ in terms of $e$, $p$ and $q$ using the fact that $de =
    1\mod\phi$.

Since it's basically trivial to find the private key given knowledge of the
primes $p$ and $q$ used to create the public key, we want to generate a new
set of primes for each key we create.  One approach to doing so relies on
generating random integers and then checking if the integers generated are
actually prime (go figure).  This requires using a /primality test/ to check
if the resulting integers are actually prime.  An old yet useful test is
provided by *Fermat's Theorem*:
#+begin_quote
If $p$ is a prime number, then $a^p - a$ is a multiple of $p$ for any integer
$a$.  Equivalently, if $p$ is prime then $a^p = a \mod p$.
#+end_quote
Note that this test doesn't tell us precisely when a number is prime, but it
can let us know if a number is composite.  A relatively simple way to use
this test to determine if a given number $p$ is prime is as follows:
1. Decide how many tests you want to run using Fermat's Theorem.  Call this
   number $n$.
2. For $i=1$ to $n$, do the following:
   1. Pick a random integer between $2$ and $p - 2$.
   2. Set $r = a^{p-1}\mod p$.
   3. If $r\neq 1$, STOP. You now know that $p$ is composite.  Otherwise,
      repeat from above and pick another random integer between $2$ and $p -
               2$.

*Example*: Create a function ~fermat~ that implements the primality test
 above, then try applying your function to test whether or not the numbers
 $99$, $143$ and $561$ are prime.

*Example*: Create a function ~rsa_key_gen~ that uses random primes to
 generate public/private key-pairs.  Your function should also use the
 ~fermat~ function to test for primality, and you can reuse your code above
 to produce the actual keys.
